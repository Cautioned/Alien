name: 'publish'

on:
  push:
    branches:
      - release
  workflow_dispatch: # Allows manual triggering from the GitHub UI

# This workflow will trigger on each push to the `release` branch OR when manually dispatched.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v2.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libmpv-dev
        # webkitgtk 4.1 is for Tauri v2.

      # === End Platform Dependencies ===

      - name: install frontend dependencies
        run: npm ci # Use npm ci for cleaner installs in CI

      # === Build Frontend CSS ===
      - name: Build Tailwind CSS
        run: npm run build:css # Runs the build:css script from the root package.json

      # === Install MSYS2 for gendef/dlltool (Windows Only) ===
      - name: Install MSYS2
        if: matrix.platform == 'windows-latest'
        run: choco install msys2 --params "/InstallDir:C:\msys64" -y

      # === Add MSYS2 tools to PATH (Windows Only) ===
      - name: Add MSYS2 tools to PATH
        if: matrix.platform == 'windows-latest'
        run: echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh # Use powershell for this step

      # === MPV/Linker Setup ===
      - name: Install/Setup mpv (macOS)
        if: startsWith(matrix.platform, 'macos-')
        run: |
          TARGET_ARCH="${{ matrix.args }}" # Get the target string
          MPV_LIB_PATH=""
          
          echo "Build target args: $TARGET_ARCH"
          
          if [[ "$TARGET_ARCH" == *"aarch64-apple-darwin"* ]]; then
            echo "Installing mpv via Homebrew (native ARM64)..."
            brew install mpv 
            echo "Setting paths for ARM64 build..."
            MPV_LIB_PATH="/opt/homebrew/opt/mpv/lib" # Standard ARM Homebrew path
          elif [[ "$TARGET_ARCH" == *"x86_64-apple-darwin"* ]]; then
            # Install x86_64 Homebrew into /usr/local first
            echo "Installing Homebrew for x86_64 into /usr/local (non-interactive)..."
            if ! arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" < /dev/null; then
              echo "::error::Failed to install x86_64 Homebrew into /usr/local."
              exit 1
            fi
            echo "Successfully initiated x86_64 Homebrew installation."
            
            # --- DEBUG: Verify x86_64 Homebrew installation --- 
            echo "Checking existence of /usr/local/bin/brew:"
            ls -l /usr/local/bin/brew
            echo "Running config for /usr/local/bin/brew:"
            arch -x86_64 /usr/local/bin/brew config || echo '::warning::Failed to run brew config for x86_64 brew'
            # --- END DEBUG --- 
            
            echo "Attempting to install x86_64 mpv using /usr/local/bin/brew with explicit PATH..."
            # Use the x86_64 brew executable explicitly and set PATH
            arch -x86_64 env PATH="/usr/local/bin:$PATH" /usr/local/bin/brew install mpv
            BREW_EXIT_CODE=$?
            echo "brew install mpv exited with code: $BREW_EXIT_CODE"
            
            if [ $BREW_EXIT_CODE -ne 0 ]; then
              echo "::error::Failed to install x86_64 mpv (Exit Code: $BREW_EXIT_CODE)."
              # Add specific logs from brew if possible
              # cat /Users/runner/Library/Logs/Homebrew/mpv/01.configure.cc # Example log path, might vary
              exit 1
            fi
            echo "Successfully installed x86_64 mpv."
            
            echo "Setting paths for X86_64 build..."
            # Standard path for Homebrew installed in /usr/local
            MPV_LIB_PATH="/usr/local/opt/mpv/lib"
            echo "Using x86_64 mpv path: $MPV_LIB_PATH"
            
            # --- DEBUG: Check the determined path and library --- 
            echo "Listing contents of x86_64 lib path: $MPV_LIB_PATH"
            ls -l "$MPV_LIB_PATH" || echo "::warning::Directory $MPV_LIB_PATH not found or couldn't be listed."
            echo "Checking architecture of libmpv.dylib in $MPV_LIB_PATH"
            file "$MPV_LIB_PATH/libmpv.dylib" || echo "::warning::libmpv.dylib not found at $MPV_LIB_PATH/libmpv.dylib"
            file "$MPV_LIB_PATH/libmpv.2.dylib" || echo "::warning::libmpv.2.dylib not found at $MPV_LIB_PATH/libmpv.2.dylib"
            # --- END DEBUG --- 
          else
            echo "::error::Unsupported macOS target architecture: $TARGET_ARCH. Cannot determine which mpv to install."
            exit 1
          fi
          
          echo "Attempting to use MPV library path: $MPV_LIB_PATH"
          
          # Check if the determined directory exists
          if [ -z "$MPV_LIB_PATH" ] || [ ! -d "$MPV_LIB_PATH" ]; then
            echo "::error::MPV library directory not found: $MPV_LIB_PATH for target $TARGET_ARCH"
            # Add more specific debug listings based on target
            if [[ "$TARGET_ARCH" == *"aarch64-apple-darwin"* ]]; then
              echo "Listing /opt/homebrew/opt/mpv/lib..."
              ls -l /opt/homebrew/opt/mpv/lib || true
            elif [[ "$TARGET_ARCH" == *"x86_64-apple-darwin"* ]]; then
              echo "Listing /usr/local/opt/mpv/lib..."
              ls -l /usr/local/opt/mpv/lib || true
            fi
            exit 1
          fi
          
          # Check if the library file itself exists
          if [ ! -f "$MPV_LIB_PATH/libmpv.dylib" ] && [ ! -f "$MPV_LIB_PATH/libmpv.2.dylib" ]; then
            echo "::error::libmpv.dylib or libmpv.2.dylib not found in $MPV_LIB_PATH"
            exit 1
          fi
          
          echo "Using MPV library path: $MPV_LIB_PATH"
          echo "Adding linker search path: $MPV_LIB_PATH"
          # Quote the path in RUSTFLAGS in case it contains spaces
          echo "RUSTFLAGS=-L \"$MPV_LIB_PATH\"" >> $GITHUB_ENV
          echo "LIBMPV_LIB_DIR=$MPV_LIB_PATH" >> $GITHUB_ENV

      - name: Download libmpv-2.dll (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri 'https://cautioned.co/libmpv-2.dll' -OutFile 'src-tauri/libmpv-2.dll'
          echo "libmpv-2.dll downloaded to src-tauri/"
      
      - name: Generate MPV .lib file (Windows)
        if: matrix.platform == 'windows-latest'
        # Run AFTER installing MSYS2 and adding to PATH
        shell: powershell # Ensure powershell is used
        run: |
          .\src-tauri\generate-lib.ps1
          echo "MPV .lib file generated (hopefully)"
      # === End MPV/Linker Setup ===

      # === Tauri Build and Release (Single Step) ===
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # RUSTFLAGS and LIBMPV_LIB_DIR are now set via GITHUB_ENV in the setup step above
          # --- Signing Keys --- 
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }} # Use secret directly
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }} # Use secret directly
          # --- Passwords --- 
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }} 
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__ # The action automatically replaces __VERSION__ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true # Creates a draft release. Change to false to publish automatically.
          prerelease: false # Set to true if releasing pre-releases.
          includeUpdaterJson: true
          args: ${{ matrix.args }}
          # Note: Assumes `libmpv-2.dll` in `src-tauri/resources` (tauri.conf.json) is sufficient for bundling on Windows. 