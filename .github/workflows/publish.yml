name: 'publish'

on:
  push:
    branches:
      - release
  workflow_dispatch: # Allows manual triggering from the GitHub UI

# This workflow will trigger on each push to the `release` branch OR when manually dispatched.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v2.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libmpv-dev
        # webkitgtk 4.1 is for Tauri v2.

      # === End Platform Dependencies ===

      - name: install frontend dependencies
        run: npm ci # Use npm ci for cleaner installs in CI

      # === Build Frontend CSS ===
      - name: Build Tailwind CSS
        run: npm run build:css # Runs the build:css script from the root package.json

      # === Install MSYS2 for gendef/dlltool (Windows Only) ===
      - name: Install MSYS2
        if: matrix.platform == 'windows-latest'
        run: choco install msys2 --params "/InstallDir:C:\msys64" -y

      # === Add MSYS2 tools to PATH (Windows Only) ===
      - name: Add MSYS2 tools to PATH
        if: matrix.platform == 'windows-latest'
        run: echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh # Use powershell for this step

      # === MPV/Linker Setup ===
      - name: Install/Setup mpv (macOS)
        if: startsWith(matrix.platform, 'macos-')
        run: |
          echo "Installing ARM mpv-iina via Homebrew tap..."
          brew tap iina/homebrew-mpv-iina
          brew install --HEAD mpv-iina # Installs native arch (arm64) - keg-only
          
          echo "Attempting to install/reinstall x86_64 mpv-iina via Rosetta..."
          # Use reinstall to be more forceful
          arch -x86_64 brew reinstall --HEAD mpv-iina || arch -x86_64 brew install --HEAD mpv-iina 
          
          TARGET_ARCH="${{ matrix.args }}" # Get the target string like --target aarch64-apple-darwin
          MPV_LIB_PATH=""
          CONFIG_CONTENT=""
          
          echo "Build target args: $TARGET_ARCH"
          mkdir -p .cargo # Ensure .cargo directory exists
          
          if [[ "$TARGET_ARCH" == *"aarch64-apple-darwin"* ]]; then
            echo "Setting paths for ARM64 build..."
            # Use the keg-only path for ARM mpv-iina
            MPV_LIB_PATH="/opt/homebrew/opt/mpv-iina/lib"
            CONFIG_CONTENT="[target.aarch64-apple-darwin]\nrustflags = [\"-L\", \"$MPV_LIB_PATH\"]"
          elif [[ "$TARGET_ARCH" == *"x86_64-apple-darwin"* ]]; then
            echo "Setting paths for X86_64 build using Intel keg path..."
            # Use the standard Intel Homebrew keg path for mpv-iina
            MPV_LIB_PATH="/usr/local/opt/mpv-iina/lib"
            CONFIG_CONTENT="[target.x86_64-apple-darwin]\nrustflags = [\"-L\", \"$MPV_LIB_PATH\"]"
          else
            echo "Warning: Could not determine MPV lib path for target $TARGET_ARCH. Defaulting to ARM keg path."
            MPV_LIB_PATH="/opt/homebrew/opt/mpv-iina/lib"
          fi
          
          if [ -z "$MPV_LIB_PATH" ]; then
            echo "::error::Failed to determine MPV library path for target $TARGET_ARCH"
            exit 1
          fi

          # Add some debug checks for library existence
          echo "Checking ARM path: /opt/homebrew/opt/mpv-iina/lib"
          ls -l /opt/homebrew/opt/mpv-iina/lib || echo "ARM Path listing failed (might be ok if not ARM build)"
          echo "Checking Intel path: /usr/local/opt/mpv-iina/lib"
          ls -l /usr/local/opt/mpv-iina/lib || echo "Intel Path listing failed (might be ok if not Intel build)"
          
          # Create the config file if content was set
          if [ -n "$CONFIG_CONTENT" ]; then
            echo "Creating .cargo/config.toml"
            echo -e "$CONFIG_CONTENT" > .cargo/config.toml
            cat .cargo/config.toml # Print content for verification
          fi
          
          # Still set LIBMPV_LIB_DIR for the build script (libmpv2-sys)
          echo "Setting LIBMPV_LIB_DIR=$MPV_LIB_PATH"
          echo "LIBMPV_LIB_DIR=$MPV_LIB_PATH" >> $GITHUB_ENV

      - name: Download libmpv-2.dll (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri 'https://cautioned.co/libmpv-2.dll' -OutFile 'src-tauri/libmpv-2.dll'
          echo "libmpv-2.dll downloaded to src-tauri/"
      
      - name: Generate MPV .lib file (Windows)
        if: matrix.platform == 'windows-latest'
        # Run AFTER installing MSYS2 and adding to PATH
        shell: powershell # Ensure powershell is used
        run: |
          .\src-tauri\generate-lib.ps1
          echo "MPV .lib file generated (hopefully)"
      # === End MPV/Linker Setup ===

      # === Tauri Build and Release (Single Step) ===
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # RUSTFLAGS and LIBMPV_LIB_DIR are now set via $GITHUB_ENV in previous steps
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__ # The action automatically replaces __VERSION__ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true # Creates a draft release. Change to false to publish automatically.
          prerelease: false # Set to true if releasing pre-releases.
          includeUpdaterJson: true
          args: ${{ matrix.args }}
          # Note: Assumes `libmpv-2.dll` in `src-tauri/resources` (tauri.conf.json) is sufficient for bundling on Windows. 